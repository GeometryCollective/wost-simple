resizeCanvas
{
   override canvas.width = 150
}

forall Point `a` {
   scalar w = canvas.width
   scalar h = canvas.height
   override `a`.x = (-w/2 + 10,0)
}
forall Point `b` {
   scalar w = canvas.width
   scalar h = canvas.height
   override `b`.x = (0,h/6)
}
forall Point `c` {
   scalar w = canvas.width
   scalar h = canvas.height
   override `c`.x = (w/2 - 10,-h/6)
}
forall Segment `ab` {
   override `ab`.icon.strokeWidth = 1.5*global.lineWidth
}
forall Segment `bc` {
   override `bc`.icon.strokeWidth = 1.5*global.lineWidth
}

-- Conditionally label diagram as "silhouette" or
-- "not silhouette" depending on whether `b` is a silhouette
-- point relative to `x`.
forall Triangle t1; Triangle t2 {

   -- compute the signed area of each triangle
   scalar A1 = cross2D( t1.b - t1.a, t1.c - t1.a )
   scalar A2 = cross2D( t2.b - t2.a, t2.c - t2.a )

   -- compute the sign of the product, which will
   -- be positive if the triangles have the same
   -- orientation and negative otherwise
   scalar s = A1*A2

   -- emulate the statement
   --    alpha = s < 0 ? 0 : 1
   -- using a steep sigmoid function to
   -- approximate a step function
   scalar alpha = 1/(1 + exp(-1000*s))

   shape isSilhouette = Text {
      string: "silhouette"
      center: (0,-canvas.height/2 + 2*global.labelHeight) - 1.5*global.labelHeight*(0,alpha)
      fontFamily: global.labelFamily
      fontSize: global.labelSize
      fillColor: rgba( alpha, alpha, alpha, 1-alpha )
      opacity: 1 - alpha
      ensureOnCanvas: false
   }

   shape notSilhouette = Text {
      string: "not silhouette"
      center: (0,-canvas.height/2 + 2*global.labelHeight) - 1.5*global.labelHeight*(0,1-alpha)
      fontFamily: global.labelFamily
      fontSize: global.labelSize
      fillColor: rgba( 1-alpha, 1-alpha, 1-alpha, alpha )
      opacity: alpha
      ensureOnCanvas: false
   }
}
